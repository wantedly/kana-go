package kana

import (
	"strconv"
	"strings"
)

// ConvertOptions describes options for [Convert].
type ConvertOptions int

const (
	// HalfwidthToWide converts characters in halfwidth forms
	// to their ordinary, wide versions.
	//
	// The characters having East_Asian_Width property value of
	// H (East Asian Halfwidth) except U+20A9 WON SIGN (‚Ç©) are converted.
	// That is:
	//
	//  - U+FF61 HALFWIDTH IDEOGRAPHIC FULL STOP (ÔΩ°) to U+FFBE HALFWIDTH HANGUL LETTER HIEUH (Ôææ)
	//  - U+FFC2 HALFWIDTH HANGUL LETTER A (ÔøÇ) to U+FFC7 HALFWIDTH HANGUL LETTER E (Ôøá)
	//  - U+FFCA HALFWIDTH HANGUL LETTER YEO (Ôøä) to U+FFCF HALFWIDTH HANGUL LETTER OE (Ôøè)
	//  - U+FFD2 HALFWIDTH HANGUL LETTER YO (Ôøí) to U+FFD7 HALFWIDTH HANGUL LETTER YU (Ôøó)
	//  - U+FFDA HALFWIDTH HANGUL LETTER EU (Ôøö) to U+FFDC HALFWIDTH HANGUL LETTER I (Ôøú)
	//  - U+FFE8 HALFWIDTH FORMS LIGHT VERTICAL (Ôø®) to U+FFEE HALFWIDTH WHITE CIRCLE (ÔøÆ)
	//
	// The conversion is roughly equivalent to NFKC but with some differences:
	//
	//  - Halfwidth Hangul letters are not fully normalized and instead
	//    converted to the corresponding letters
	//    in Hangul Compatibility Jamo block.
	//
	// The following compat flags affect the behavior of this transformation:
	//
	//  - [CompatVoicedSoundMarks]
	//  - [CompatVoicedKanaRestriction]
	//  - [CompatKeepHalfwidthHangul]
	//  - [CompatKeepHalfwidthSymbols]
	HalfwidthToWide ConvertOptions = 1 << iota
	// FullwidthToNarrow converts characters in fullwidth forms
	// to their ordinary, narrow versions.
	//
	// The characters having East_Asian_Width property value of
	// F (East Asian Fullwidth) are converted.
	// That is:
	//
	//  - U+FF01 FULLWIDTH EXCLAMATION MARK (ÔºÅ) to U+FF60 FULLWIDTH RIGHT WHITE PARENTHESIS (ÔΩ†)
	//  - U+FFE0 FULLWIDTH CENT SIGN (Ôø†) to U+FFE6 FULLWIDTH WON SIGN (Ôø¶)
	//
	// The conversion is roughly equivalent to NFKC but with some differences:
	//
	//  - U+FFE3 FULLWIDTH MACRON (Ôø£) is not fully normalized and instead
	//    converted to U+00AF MACRON (¬Ø).
	//
	// The following compat flags affect the behavior of this transformation:
	//
	//  - [CompatQuotes]
	//  - [CompatMinus]
	//  - [CompatOverline]
	//  - [CompatCurrency]
	//  - [CompatBrackets]
	//  - [CompatKeepSpaces]
	//  - [CompatDoubleSpaces]
	FullwidthToNarrow
	// KatakanaToHiragana converts katakana to hiragana.
	//
	// Consider it transformation from Script=Katakana to Script=Hiragana,
	// but there are a lot of exceptions.
	//
	// Those characters are converted to a single hiragana character:
	//
	//  - U+30A1 KATAKANA LETTER SMALL A („Ç°) to U+30F6 KATAKANA LETTER SMALL KE („É∂)
	//  - U+30FD KATAKANA ITERATION MARK („ÉΩ) to U+30FE KATAKANA VOICED ITERATION MARK („Éæ)
	//  - U+1B155 KATAKANA LETTER SMALL KO (õÖï)
	//  - U+1B164 KATAKANA LETTER SMALL WI (õÖ§) to U+1B166 KATAKANA LETTER SMALL WO (õÖ¶)
	//
	// Those characters are converted to a sequence of characters:
	//
	//  - U+30F7 KATAKANA LETTER VA („É∑) to U+30FA KATAKANA LETTER VO („É∫)
	//
	// Those characters are not converted:
	//
	//  - U+30FF KATAKANA DIGRAPH KOTO („Éø)
	//  - U+31F0 KATAKANA LETTER SMALL KU („á∞) to U+31FF KATAKANA LETTER SMALL RO („áø)
	//  - U+32D0 CIRCLED KATAKANA A („ãê) to U+32FE CIRCLED KATAKANA WO („ãæ)
	//  - U+3300 SQUARE APAATO („åÄ) to U+3357 SQUARE WATTO („çó)
	//  - U+1AFF0 KATAKANA LETTER MINNAN TONE-2 (öø∞) to U+1AFF3 KATAKANA LETTER MINNAN TONE-5 (öø≥)
	//  - U+1AFF5 KATAKANA LETTER MINNAN TONE-7 (öøµ) to U+1AFFB KATAKANA LETTER MINNAN NASALIZED TONE-8 (öøª)
	//  - U+1B000 KATAKANA LETTER ARCHAIC E (õÄÄ)
	//  - U+1B120 KATAKANA LETTER ARCHAIC YI (õÑ†) to U+1B122 KATAKANA LETTER ARCHAIC WU (õÑ¢)
	//  - U+1B167 KATAKANA LETTER SMALL N (õÖß)
	//
	// You need [HalfwidthToWide] to convert them to hiragana:
	//
	//  - U+FF66 HALFWIDTH KATAKANA LETTER WO (ÔΩ¶) to U+FF6F HALFWIDTH KATAKANA LETTER SMALL TU (ÔΩØ)
	//  - U+FF71 HALFWIDTH KATAKANA LETTER A (ÔΩ±) to U+FF9D HALFWIDTH KATAKANA LETTER N (Ôæù)
	//
	// The following compat flags affect the behavior of this transformation:
	//
	//  - [CompatKanaRestriction]
	KatakanaToHiragana
	// HiraganaToKatakana converts hiragana to katakana.
	//
	// Consider it transformation from Script=Hiragana to Script=Katakana,
	// but there are a lot of exceptions.
	//
	// Those characters are converted to a single katakana character:
	//
	//  - U+3041 HIRAGANA LETTER SMALL A („ÅÅ) to U+3096 HIRAGANA LETTER SMALL KE („Çñ)
	//  - U+309D HIRAGANA ITERATION MARK („Çù) to U+309E HIRAGANA VOICED ITERATION MARK („Çû)
	//  - U+1B132 HIRAGANA LETTER SMALL KO (õÑ≤)
	//  - U+1B150 HIRAGANA LETTER SMALL WI (õÖê) to U+1B152 HIRAGANA LETTER SMALL WO (õÖí)
	//
	// Those characters are not converted:
	//
	//  - U+309F HIRAGANA DIGRAPH YORI („Çü)
	//  - U+1B001 HIRAGANA LETTER ARCHAIC YE (õÄÅ) to U+1B11F HIRAGANA LETTER ARCHAIC WU (õÑü)
	//  - U+1F200 SQUARE HIRAGANA HOKA (üàÄ)
	//
	// The following compat flags affect the behavior of this transformation:
	//
	//  - [CompatKanaRestriction]
	HiraganaToKatakana
	// CompatWideKatakanaToHalfwidth converts ordinary katakana
	// to their halfwidth forms.
	//
	// This transformation newly introduces compatibility characters
	// rather than reducing them in the input string.
	// This is against what Unicode intends to do. Therefore,
	// the entire transformation mode is considered as a compatibility option.
	//
	// If you want to normalize between fullwidth and halfwidth katakana,
	// you should use [HalfwidthToWide] instead.
	//
	// The following characters are converted:
	//
	//  - U+3001 IDEOGRAPHIC COMMA („ÄÅ) to U+3002 IDEOGRAPHIC FULL STOP („ÄÇ)
	//  - U+300C LEFT CORNER BRACKET („Äå) to U+300D RIGHT CORNER BRACKET („Äç)
	//  - U+3099 COMBINING KATAKANA-HIRAGANA VOICED SOUND MARK to U+309C KATAKANA-HIRAGANA SEMI-VOICED SOUND MARK („Çú)
	//  - U+30A1 KATAKANA LETTER SMALL A („Ç°) to U+30ED KATAKANA LETTER RO („É≠)
	//  - U+30EF KATAKANA LETTER WA („ÉØ)
	//  - U+30F2 KATAKANA LETTER WO („É≤) to U+30F4 KATAKANA LETTER VU („É¥)
	//  - U+30FB KATAKANA MIDDLE DOT („Éª) to U+30FC KATAKANA-HIRAGANA PROLONGED SOUND MARK („Éº)
	//
	// When a character in the list canonically decomposes to a base character
	// and a combining voiced or semi-voiced sound mark, the transformation
	// is applied after decomposing the character.
	//
	// Note that, U+30F7 KATAKANA LETTER VA („É∑) and U+30FA KATAKANA LETTER VO („É∫)
	// can also be transformed this way, but they are not included in the list.
	// This is because the entire transformation exists for compatibility
	// with NKF.
	//
	// Like other compat options, this is not stable under canonical equivalence.
	CompatWideKatakanaToHalfwidth
	// CompatQuotes is a compatibility option
	// to reproduce NKF's behavior for quotes.
	//
	// Specifically, the following transformations are additionally applied
	// in [FullwidthToNarrow]:
	//
	//  - U+00B4 ACUTE ACCENT (¬¥) ‚Üí U+0027 APOSTROPHE (')
	//  - U+2018 LEFT SINGLE QUOTATION MARK (‚Äò) ‚Üí U+0060 GRAVE ACCENT (`)
	//  - U+2019 RIGHT SINGLE QUOTATION MARK (‚Äô) ‚Üí U+0027 APOSTROPHE (')
	//  - U+201C LEFT DOUBLE QUOTATION MARK (‚Äú) ‚Üí U+0022 QUOTATION MARK (")
	//  - U+201D RIGHT DOUBLE QUOTATION MARK (‚Äù) ‚Üí U+0022 QUOTATION MARK (")
	//
	// While the following transformations are inhibited in [FullwidthToNarrow]:
	//
	//  - U+FF02 FULLWIDTH QUOTATION MARK (ÔºÇ)
	//    (usually converted to U+0022 QUOTATION MARK ("))
	//  - U+FF07 FULLWIDTH APOSTROPHE (Ôºá)
	//    (usually converted to U+0027 APOSTROPHE ('))
	CompatQuotes
	// CompatMinus is a compatibility option
	// to reproduce NKF's behavior for minus signs, hypens, and similar symbols.
	//
	// Specifically, the following transformations are applied:
	//
	//  - U+2015 HORIZONTAL BAR (‚Äï) ‚Üí U+2014 EM DASH (‚Äî)
	//  - U+FF0D FULLWIDTH HYPHEN-MINUS (Ôºç) ‚Üí U+2212 MINUS SIGN (‚àí)
	//
	// and the following transformations are additionally applied
	// in [FullwidthToNarrow]:
	//
	//  - U+2014 EM DASH (‚Äî) ‚Üí U+002D HYPHEN-MINUS (-)
	//  - U+2015 HORIZONTAL BAR (‚Äï) ‚Üí U+002D HYPHEN-MINUS (-)
	//  - U+2212 MINUS SIGN (‚àí) ‚Üí U+002D HYPHEN-MINUS (-)
	//  - U+FF0D FULLWIDTH HYPHEN-MINUS (Ôºç) ‚Üí U+002D HYPHEN-MINUS (-)
	CompatMinus
	// CompatOverline is a compatibility option
	// to reproduce NKF's behavior for overlines and similar symbols.
	//
	// Specifically, the following transformations are applied:
	//
	//  - U+FFE3 FULLWIDTH MACRON (Ôø£) ‚Üí U+203E OVERLINE (‚Äæ), which wins over
	//    [FullwidthToNarrow], where it is converted to U+00AF MACRON (¬Ø).
	//
	//
	// Additionally, the following transformations are inhibited in
	// [FullwidthToNarrow]:
	//
	//  - U+FF5E FULLWIDTH TILDE (ÔΩû)
	//    (usually converted to U+007E TILDE (~))
	CompatOverline
	// CompatCurrency is a compatibility option
	// to reproduce NKF's behavior for currency symbols.
	//
	// Specifically, the following transformations are applied regardless of
	// [FullwidthToNarrow]:
	//
	//  - U+FFE0 FULLWIDTH CENT SIGN (Ôø†) ‚Üí U+00A2 CENT SIGN (¬¢)
	//  - U+FFE1 FULLWIDTH POUND SIGN (Ôø°) ‚Üí U+00A3 POUND SIGN (¬£)
	//  - U+FFE5 FULLWIDTH YEN SIGN (Ôø•) ‚Üí U+00A5 YEN SIGN (¬•)
	//
	// and the following transformations are inhibited in [FullwidthToNarrow]:
	//
	//  - U+FFE6 FULLWIDTH WON SIGN (Ôø¶)
	//    (usually converted to U+20A9 WON SIGN (‚Ç©))
	CompatCurrency
	// CompatBrackets is a compatibility option
	// to reproduce NKF's behavior for brackets and parentheses.
	//
	// Specifically, the following transformations are additionally applied
	// in [FullwidthToNarrow]:
	//
	//  - U+3008 LEFT ANGLE BRACKET („Äà) ‚Üí U+003C LESS-THAN SIGN (<)
	//  - U+3009 RIGHT ANGLE BRACKET („Äâ) ‚Üí U+003E GREATER-THAN SIGN (>)
	//
	// while the following transformations are inhibited
	// in [FullwidthToNarrow]:
	//
	//  - U+FF5F FULLWIDTH LEFT WHITE PARENTHESIS (ÔΩü)
	//    (usually converted to U+2985 LEFT WHITE PARENTHESIS (‚¶Ö))
	//  - U+FF60 FULLWIDTH RIGHT WHITE PARENTHESIS (ÔΩ†)
	//    (usually converted to U+2986 RIGHT WHITE PARENTHESIS (‚¶Ü))
	CompatBrackets
	// CompatOtherSymbols is a compatibility option
	// to reproduce NKF's behavior for miscellaneous symbols.
	//
	// Specifically, the following transformations are applied regardless of
	// [FullwidthToNarrow]:
	//
	//  - U+FFE2 FULLWIDTH NOT SIGN (Ôø¢) ‚Üí U+00AC NOT SIGN (¬¨)
	//  - U+FFE4 FULLWIDTH BROKEN BAR (Ôø§) ‚Üí U+00A6 BROKEN BAR (¬¶)
	//
	// and the following transformations are also applied regardless of
	// [FullwidthToNarrow]:
	//
	//  - U+2225 PARALLEL TO (‚à•) ‚Üí U+2016 DOUBLE VERTICAL LINE (‚Äñ)
	CompatOtherSymbols
	// CompatKeepSpaces is a compatibility option
	// to reproduce NKF's behavior for Ideographic Spaces.
	//
	// Specifically, the following transformations are inhibited in
	// [FullwidthToNarrow]:
	//
	//  - U+3000 IDEOGRAPHIC SPACE („ÄÄ)
	//    (usually converted to U+0020 SPACE ( ))
	CompatKeepSpaces
	// CompatDoubleSpaces is a compatibility option
	// to reproduce NKF's behavior for Ideographic Spaces.
	//
	// Specifically, if this option is present along with [FullwidthToNarrow],
	// U+3000 IDEOGRAPHIC SPACE („ÄÄ) is converted to two U+0020 SPACE ( ) characters.
	CompatDoubleSpaces
	// CompatVoicedSoundMarks is a compatibility option
	// to reproduce NKF's behavior for voiced and semi-voiced sound marks.
	//
	// Specifically, the following transformations are applied in [HalfwidthToWide]:
	//
	//  - U+FF9E HALFWIDTH KATAKANA VOICED SOUND MARK (Ôæû) is converted to
	//    U+309B KATAKANA-HIRAGANA VOICED SOUND MARK rather than
	//    U+3099 COMBINING KATAKANA-HIRAGANA VOICED SOUND MARK, except when
	//    it follows ÔΩ≥, ÔΩ∂, ÔΩ∑, ÔΩ∏, ÔΩπ, ÔΩ∫, ÔΩª, ÔΩº, ÔΩΩ, ÔΩæ, ÔΩø, ÔæÄ, ÔæÅ, ÔæÇ, ÔæÉ, ÔæÑ, Ôæä, Ôæã, Ôæå,
	//    Ôæç, or Ôæé.
	//  - U+FF9F HALFWIDTH KATAKANA SEMI-VOICED SOUND MARK (Ôæü) is converted to
	//    U+309C KATAKANA-HIRAGANA SEMI-VOICED SOUND MARK rather than
	//    U+309A COMBINING KATAKANA-HIRAGANA SEMI-VOICED SOUND MARK, except
	//    when it follows Ôæä, Ôæã, Ôæå, Ôæç, or Ôæé.
	CompatVoicedSoundMarks
	// CompatKeepHalfwidthHangul is a compatibility option
	// to reproduce NKF's behavior for halfwidth Katakana letters.
	//
	// Specifically, the following characters are transformed
	// differently in [HalfwidthToWide]:
	//
	//  - U+FF66 HALFWIDTH KATAKANA LETTER WO (ÔΩ¶) followed by
	//    U+FF9E HALFWIDTH KATAKANA VOICED SOUND MARK (Ôæû) is converted to
	//    U+30F2 KATAKANA LETTER WO („É≤) followed by
	//    U+309B KATAKANA-HIRAGANA VOICED SOUND MARK („Çõ), rather than
	//    U+30FA KATAKANA LETTER VO („É∫).
	//  - U+FF9C HALFWIDTH KATAKANA LETTER TU (Ôæú) followed by
	//    U+FF9E HALFWIDTH KATAKANA VOICED SOUND MARK (Ôæû) is converted to
	//    U+30EF KATAKANA LETTER WA („ÉØ) followed by
	//    U+309B KATAKANA-HIRAGANA VOICED SOUND MARK („Çõ), rather than
	//    U+30F7 KATAKANA LETTER VA („É∑).
	CompatVoicedKanaRestriction
	// CompatKeepHalfwidthHangul is a compatibility option
	// to reproduce NKF's behavior for halfwidth Hangul letters.
	//
	// Specifically, the following characters are kept intact
	// in [HalfwidthToWide]:
	//
	//  - U+FFA0 HALFWIDTH HANGUL FILLER (Ôæ†)
	//  - U+FFA1 HALFWIDTH HANGUL LETTER KIYEOK (Ôæ°) to U+FFBE HALFWIDTH HANGUL LETTER HIEUH (Ôææ)
	//  - U+FFC2 HALFWIDTH HANGUL LETTER A (ÔøÇ) to U+FFC7 HALFWIDTH HANGUL LETTER E (Ôøá)
	//  - U+FFCA HALFWIDTH HANGUL LETTER YEO (Ôøä) to U+FFCF HALFWIDTH HANGUL LETTER OE (Ôøè)
	//  - U+FFD2 HALFWIDTH HANGUL LETTER YO (Ôøí) to U+FFD7 HALFWIDTH HANGUL LETTER YU (Ôøó)
	//  - U+FFDA HALFWIDTH HANGUL LETTER EU (Ôøö) to U+FFDC HALFWIDTH HANGUL LETTER I (Ôøú)
	CompatKeepHalfwidthHangul
	// CompatKeepHalfwidthSymbols is a compatibility option
	// to reproduce NKF's behavior for halfwidth symbols.
	//
	// Specifically, the following characters are kept intact
	// in [HalfwidthToWide]:
	//
	//  - U+FFE8 HALFWIDTH FORMS LIGHT VERTICAL (Ôø®)
	//  - U+FFE9 HALFWIDTH LEFTWARDS ARROW (Ôø©)
	//  - U+FFEA HALFWIDTH UPWARDS ARROW (Ôø™)
	//  - U+FFEB HALFWIDTH RIGHTWARDS ARROW (Ôø´)
	//  - U+FFEC HALFWIDTH DOWNWARDS ARROW (Ôø¨)
	//  - U+FFED HALFWIDTH BLACK SQUARE (Ôø≠)
	//  - U+FFEE HALFWIDTH WHITE CIRCLE (ÔøÆ)
	CompatKeepHalfwidthSymbols
	// CompatKanaRestriction is a compatibility option
	// to reproduce NKF's behavior for hiragana and katakana.
	//
	// Specifically, the following characters are kept intact
	// in [KatakanaToHiragana]:
	//
	//  - U+30F5 KATAKANA LETTER SMALL KA („Éµ)
	//  - U+30F6 KATAKANA LETTER SMALL KE („É∂)
	//  - U+30F7 KATAKANA LETTER VA („É∑)
	//  - U+30F8 KATAKANA LETTER VI („É∏)
	//  - U+30F9 KATAKANA LETTER VE („Éπ)
	//  - U+30FA KATAKANA LETTER VO („É∫)
	//  - U+1B155 KATAKANA LETTER SMALL KO (õÖï)
	//  - U+1B164 KATAKANA LETTER SMALL WI (õÖ§)
	//  - U+1B165 KATAKANA LETTER SMALL WE (õÖ•)
	//  - U+1B166 KATAKANA LETTER SMALL WO (õÖ¶)
	//
	// and the following characters are kept intact in [HiraganaToKatakana]:
	//
	//  - U+3095 HIRAGANA LETTER SMALL KA („Çï)
	//  - U+3096 HIRAGANA LETTER SMALL KE („Çñ)
	//  - U+1B132 HIRAGANA LETTER SMALL KO (õÑ≤)
	//  - U+1B150 HIRAGANA LETTER SMALL WI (õÖê)
	//  - U+1B151 HIRAGANA LETTER SMALL WE (õÖë)
	//  - U+1B152 HIRAGANA LETTER SMALL WO (õÖí)
	CompatKanaRestriction
)

func (o ConvertOptions) Normalize() ConvertOptions {
	if o&FullwidthToNarrow == 0 {
		o &^= CompatQuotes | CompatBrackets | CompatKeepSpaces | CompatDoubleSpaces
	}
	if o&CompatKeepSpaces != 0 {
		o &^= CompatDoubleSpaces
	}
	if o&HalfwidthToWide == 0 {
		o &^= CompatVoicedSoundMarks | CompatVoicedKanaRestriction | CompatKeepHalfwidthHangul | CompatKeepHalfwidthSymbols
	}
	if o&(KatakanaToHiragana|HiraganaToKatakana) == 0 {
		o &^= CompatKanaRestriction
	}
	return o
}

var flagNames = []struct {
	name string
	flag ConvertOptions
	mask ConvertOptions
}{
	{"HalfwidthToWide", HalfwidthToWide, HalfwidthToWide},
	{"FullwidthToNarrow", FullwidthToNarrow, FullwidthToNarrow},
	{"KatakanaToHiragana", KatakanaToHiragana, KatakanaToHiragana},
	{"HiraganaToKatakana", HiraganaToKatakana, HiraganaToKatakana},
	{"CompatWideKatakanaToHalfwidth", CompatWideKatakanaToHalfwidth, CompatWideKatakanaToHalfwidth},
	{"CompatQuotes", CompatQuotes, CompatQuotes},
	{"CompatMinus", CompatMinus, CompatMinus},
	{"CompatOverline", CompatOverline, CompatOverline},
	{"CompatCurrency", CompatCurrency, CompatCurrency},
	{"CompatBrackets", CompatBrackets, CompatBrackets},
	{"CompatOtherSymbols", CompatOtherSymbols, CompatOtherSymbols},
	{"CompatKeepSpaces", CompatKeepSpaces, CompatKeepSpaces},
	{"CompatDoubleSpaces", CompatDoubleSpaces, CompatDoubleSpaces},
	{"CompatVoicedSoundMarks", CompatVoicedSoundMarks, CompatVoicedSoundMarks},
	{"CompatVoicedKanaRestriction", CompatVoicedKanaRestriction, CompatVoicedKanaRestriction},
	{"CompatKeepHalfwidthHangul", CompatKeepHalfwidthHangul, CompatKeepHalfwidthHangul},
	{"CompatKeepHalfwidthSymbols", CompatKeepHalfwidthSymbols, CompatKeepHalfwidthSymbols},
	{"CompatKanaRestriction", CompatKanaRestriction, CompatKanaRestriction},
}

func (o ConvertOptions) String() string {
	var names []string
	for _, n := range flagNames {
		if o&n.mask == n.flag {
			names = append(names, n.name)
			o &^= n.mask
		}
	}
	if o != 0 {
		names = append(names, "0x"+strconv.FormatInt(int64(o), 16))
	} else if len(names) == 0 {
		return "0"
	}

	return strings.Join(names, " | ")
}
